/**
 * Flowtype definitions for logger
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.20.0
 * @flow
 */

import { ZalgoPromise } from "@krakenjs/zalgo-promise";
import type { Transport } from "./http";
import type { Payload } from "./types";
declare type LoggerOptions = {
  url?: string,
  prefix?: string,
  logLevel?: string,
  transport?: Transport,
  flushInterval?: number,
  enableSendBeacon?: boolean,
  amplitudeApiKey?: string,
  ...
};
declare type ClientPayload = Payload;
declare type Log = (name: string, payload?: ClientPayload) => LoggerType;
declare type Track = (payload: ClientPayload) => LoggerType;
declare type Builder = (arg0: Payload) => ClientPayload;
declare type AddBuilder = (arg0: Builder) => LoggerType;
export type LoggerType = {
  debug: Log,
  info: Log,
  warn: Log,
  error: Log,
  track: Track,
  flush: () => ZalgoPromise<void>,
  immediateFlush: () => ZalgoPromise<void>,
  addPayloadBuilder: AddBuilder,
  addMetaBuilder: AddBuilder,
  addTrackingBuilder: AddBuilder,
  addHeaderBuilder: AddBuilder,
  setTransport: (arg0: Transport) => LoggerType,
  configure: (arg0: LoggerOptions) => LoggerType,
  ...
};
declare export function Logger(x: LoggerOptions): LoggerType;
